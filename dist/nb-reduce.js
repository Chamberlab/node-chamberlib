'use strict';

var memwatch = require('memwatch-next'),
    cl = require('../src/index').default,
    path = require('path');

memwatch.on('leak', function (info) {
    console.log('WARNING: ' + info.reason + ' - Growth: ' + info.growth);
});

var lmdbOut = new cl.nodes.storage.LMDBNode(),
    lmdbIn = new cl.nodes.storage.LMDBNode(),
    quantize = new cl.nodes.transform.QuantizeTime({ steps: new cl.quantities.Time(0.1) });

lmdbOut.openDataSet(path.resolve('../data/lmdb/20151208_15h59m12s_nanobrain'), '20151208_15h59m12s_nanobrain');
lmdbIn.createDataSet(path.resolve('../data/lmdb/20151208_15h59m12s_nanobrain-reduced'), 2.0, '20151208_15h59m12s_nanobrain');

lmdbIn.on('done', function () {
    console.log('done!');
    process.exit(0);
});

lmdbIn.on('error', function (err) {
    console.log(err.message);
    process.exit(err.code);
});

var outputUuid = lmdbOut.createOutput('20151208_15h59m12s_nanobrain'),
    inputUuid = lmdbIn.createInput({
    '20151208_15h59m12s_nanobrain': lmdbOut.meta.DataSet.DataChannels['20151208_15h59m12s_nanobrain'] }, true);

lmdbOut.outputs[outputUuid].stream.pipe(quantize.stream).pipe(lmdbIn.inputs[inputUuid].stream);
lmdbOut.startOutput(outputUuid);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5iLXJlZHVjZS5qcyJdLCJuYW1lcyI6WyJtZW13YXRjaCIsInJlcXVpcmUiLCJjbCIsImRlZmF1bHQiLCJwYXRoIiwib24iLCJpbmZvIiwiY29uc29sZSIsImxvZyIsInJlYXNvbiIsImdyb3d0aCIsImxtZGJPdXQiLCJub2RlcyIsInN0b3JhZ2UiLCJMTURCTm9kZSIsImxtZGJJbiIsInF1YW50aXplIiwidHJhbnNmb3JtIiwiUXVhbnRpemVUaW1lIiwic3RlcHMiLCJxdWFudGl0aWVzIiwiVGltZSIsIm9wZW5EYXRhU2V0IiwicmVzb2x2ZSIsImNyZWF0ZURhdGFTZXQiLCJwcm9jZXNzIiwiZXhpdCIsImVyciIsIm1lc3NhZ2UiLCJjb2RlIiwib3V0cHV0VXVpZCIsImNyZWF0ZU91dHB1dCIsImlucHV0VXVpZCIsImNyZWF0ZUlucHV0IiwibWV0YSIsIkRhdGFTZXQiLCJEYXRhQ2hhbm5lbHMiLCJvdXRwdXRzIiwic3RyZWFtIiwicGlwZSIsImlucHV0cyIsInN0YXJ0T3V0cHV0Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLFdBQVdDLFFBQVEsZUFBUixDQUFqQjtBQUFBLElBQ0lDLEtBQUtELFFBQVEsY0FBUixFQUF3QkUsT0FEakM7QUFBQSxJQUVJQyxPQUFPSCxRQUFRLE1BQVIsQ0FGWDs7QUFJQUQsU0FBU0ssRUFBVCxDQUFZLE1BQVosRUFBb0IsVUFBU0MsSUFBVCxFQUFlO0FBQy9CQyxZQUFRQyxHQUFSLGVBQXdCRixLQUFLRyxNQUE3QixtQkFBaURILEtBQUtJLE1BQXREO0FBQ0gsQ0FGRDs7QUFJQSxJQUFNQyxVQUFVLElBQUlULEdBQUdVLEtBQUgsQ0FBU0MsT0FBVCxDQUFpQkMsUUFBckIsRUFBaEI7QUFBQSxJQUFpREMsU0FBUyxJQUFJYixHQUFHVSxLQUFILENBQVNDLE9BQVQsQ0FBaUJDLFFBQXJCLEVBQTFEO0FBQUEsSUFDSUUsV0FBVyxJQUFJZCxHQUFHVSxLQUFILENBQVNLLFNBQVQsQ0FBbUJDLFlBQXZCLENBQW9DLEVBQUVDLE9BQU8sSUFBSWpCLEdBQUdrQixVQUFILENBQWNDLElBQWxCLENBQXVCLEdBQXZCLENBQVQsRUFBcEMsQ0FEZjs7QUFHQVYsUUFBUVcsV0FBUixDQUFvQmxCLEtBQUttQixPQUFMLENBQWEsMkNBQWIsQ0FBcEIsRUFBK0UsOEJBQS9FO0FBQ0FSLE9BQU9TLGFBQVAsQ0FDSXBCLEtBQUttQixPQUFMLENBQWEsbURBQWIsQ0FESixFQUN1RSxHQUR2RSxFQUM0RSw4QkFENUU7O0FBR0FSLE9BQU9WLEVBQVAsQ0FBVSxNQUFWLEVBQWtCLFlBQU07QUFDcEJFLFlBQVFDLEdBQVIsQ0FBWSxPQUFaO0FBQ0FpQixZQUFRQyxJQUFSLENBQWEsQ0FBYjtBQUNILENBSEQ7O0FBS0FYLE9BQU9WLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLFVBQUNzQixHQUFELEVBQVM7QUFDeEJwQixZQUFRQyxHQUFSLENBQVltQixJQUFJQyxPQUFoQjtBQUNBSCxZQUFRQyxJQUFSLENBQWFDLElBQUlFLElBQWpCO0FBQ0gsQ0FIRDs7QUFLQSxJQUFNQyxhQUFhbkIsUUFBUW9CLFlBQVIsQ0FBcUIsOEJBQXJCLENBQW5CO0FBQUEsSUFDSUMsWUFBWWpCLE9BQU9rQixXQUFQLENBQW1CO0FBQzNCLG9DQUNJdEIsUUFBUXVCLElBQVIsQ0FBYUMsT0FBYixDQUFxQkMsWUFBckIsQ0FBa0MsOEJBQWxDLENBRnVCLEVBQW5CLEVBRWlFLElBRmpFLENBRGhCOztBQUtBekIsUUFBUTBCLE9BQVIsQ0FBZ0JQLFVBQWhCLEVBQTRCUSxNQUE1QixDQUFtQ0MsSUFBbkMsQ0FBd0N2QixTQUFTc0IsTUFBakQsRUFDS0MsSUFETCxDQUNVeEIsT0FBT3lCLE1BQVAsQ0FBY1IsU0FBZCxFQUF5Qk0sTUFEbkM7QUFFQTNCLFFBQVE4QixXQUFSLENBQW9CWCxVQUFwQiIsImZpbGUiOiJuYi1yZWR1Y2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtZW13YXRjaCA9IHJlcXVpcmUoJ21lbXdhdGNoLW5leHQnKSxcbiAgICBjbCA9IHJlcXVpcmUoJy4uL3NyYy9pbmRleCcpLmRlZmF1bHQsXG4gICAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxubWVtd2F0Y2gub24oJ2xlYWsnLCBmdW5jdGlvbihpbmZvKSB7XG4gICAgY29uc29sZS5sb2coYFdBUk5JTkc6ICR7aW5mby5yZWFzb259IC0gR3Jvd3RoOiAke2luZm8uZ3Jvd3RofWApO1xufSk7XG5cbmNvbnN0IGxtZGJPdXQgPSBuZXcgY2wubm9kZXMuc3RvcmFnZS5MTURCTm9kZSgpLCBsbWRiSW4gPSBuZXcgY2wubm9kZXMuc3RvcmFnZS5MTURCTm9kZSgpLFxuICAgIHF1YW50aXplID0gbmV3IGNsLm5vZGVzLnRyYW5zZm9ybS5RdWFudGl6ZVRpbWUoeyBzdGVwczogbmV3IGNsLnF1YW50aXRpZXMuVGltZSgwLjEpIH0pO1xuXG5sbWRiT3V0Lm9wZW5EYXRhU2V0KHBhdGgucmVzb2x2ZSgnLi4vZGF0YS9sbWRiLzIwMTUxMjA4XzE1aDU5bTEyc19uYW5vYnJhaW4nKSwgJzIwMTUxMjA4XzE1aDU5bTEyc19uYW5vYnJhaW4nKTtcbmxtZGJJbi5jcmVhdGVEYXRhU2V0KFxuICAgIHBhdGgucmVzb2x2ZSgnLi4vZGF0YS9sbWRiLzIwMTUxMjA4XzE1aDU5bTEyc19uYW5vYnJhaW4tcmVkdWNlZCcpLCAyLjAsICcyMDE1MTIwOF8xNWg1OW0xMnNfbmFub2JyYWluJyk7XG5cbmxtZGJJbi5vbignZG9uZScsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnZG9uZSEnKTtcbiAgICBwcm9jZXNzLmV4aXQoMCk7XG59KTtcblxubG1kYkluLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7XG4gICAgcHJvY2Vzcy5leGl0KGVyci5jb2RlKTtcbn0pO1xuXG5jb25zdCBvdXRwdXRVdWlkID0gbG1kYk91dC5jcmVhdGVPdXRwdXQoJzIwMTUxMjA4XzE1aDU5bTEyc19uYW5vYnJhaW4nKSxcbiAgICBpbnB1dFV1aWQgPSBsbWRiSW4uY3JlYXRlSW5wdXQoe1xuICAgICAgICAnMjAxNTEyMDhfMTVoNTltMTJzX25hbm9icmFpbic6XG4gICAgICAgICAgICBsbWRiT3V0Lm1ldGEuRGF0YVNldC5EYXRhQ2hhbm5lbHNbJzIwMTUxMjA4XzE1aDU5bTEyc19uYW5vYnJhaW4nXSB9LCB0cnVlKTtcblxubG1kYk91dC5vdXRwdXRzW291dHB1dFV1aWRdLnN0cmVhbS5waXBlKHF1YW50aXplLnN0cmVhbSlcbiAgICAucGlwZShsbWRiSW4uaW5wdXRzW2lucHV0VXVpZF0uc3RyZWFtKTtcbmxtZGJPdXQuc3RhcnRPdXRwdXQob3V0cHV0VXVpZCk7XG4iXX0=